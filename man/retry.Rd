% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/retry.R
\name{retry}
\alias{retry}
\title{Retry an expression}
\usage{
retry(
  expr,
  envir = parent.frame(),
  upon = "error",
  until = no_conditions_thrown,
  silent = TRUE,
  timeout = Inf,
  max_tries = Inf,
  interval = 0.1,
  later_run_now = FALSE
)
}
\arguments{
\item{expr}{an expression to be evaluated, quasiquotation is supported.}

\item{envir}{the environment in which the expression is to be evaluated.}

\item{upon}{a vector of condition classes. The expression will be retried if a
condition is thrown. See the \code{classes} parameter of \code{rlang::catch_cnd}.}

\item{until}{a function of two aruments. This function is used to check if we need to
retry \code{expr}. The first argument is the result of \code{expr} and the second argument
is the condition thrown when \code{expr} was evaluated. \code{retry} would return the
result of \code{expr} if \code{until} returns \code{TRUE}.
The default behavior is to retry unless no conditions are thrown.
It could be also a one sided formula that is later converted to a function
using \code{rlang::as_function}.}

\item{silent}{suppress messages and warnings}

\item{timeout}{raise an error if this amount of time in second has passed.}

\item{max_tries}{maximum number of attempts}

\item{interval}{delay between retries.}

\item{later_run_now}{execute \code{later::run_now()} periodically when \code{later} is loaded?}
}
\description{
Retry an expression until either timeout is exceeded or a condition is fullfilled.
}
\examples{
retry(10)  # returns 10 immediately

elapse <- function(s, by) {
  t <- Sys.time()
  if (t - s < by) {
    stop()
  }
  return(t - s)
}
s <- Sys.time()
retry(elapse(s, 1))  # retry until success

\dontrun{
  # this won't work because each retry reruns Sys.time()
  retry(elapse(Sys.time(), 1), timeout = 3)
}

# instead, we could use quasiquotation
retry(elapse(!!(Sys.time()), 1))

x <- 0
counter <- function() {
  x <<- x + 1
  x
}
retry(counter(), until = function(res, cnd) res == 10)

x <- 0
retry(counter(), until = ~ . == 10)

\dontrun{
  # an error is raised after 1 second
  retry(stop(), timeout = 1)

  # timeout also works for indefinite R code
  retry(while(TRUE) {}, timeout = 1)
}
}
